
## Project outline

* What is it?
* Why should you care?

## Project overview

* what are the components?

## What does this look like?

```{mermaid}
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```

## Anatomy of an IoT project

* Potentially thousands of sensors
* All linked together or reporting back
* Examples:
  - Barcode scanning and stock control
  - If hospitals had network connected medicine fridges, the could use the fridges to report on inventory and start to predict when they will need more stock.
  
## Sensors

* What are they?
* What do they record?
* How is that data captured

## Running R on a Raspberry Pi

* It's easy
* It's fun!

## local shiny app

* Each sensor node has a shiny app to present the data to any local users


## But we should collect the data from _all_ the sensors!

* all the things

![](images/all_the_things.png){align=center}

## Just use a database!

* We have to manage a database
  - with redundancy and failover
* Consistency
* maintaining thousands of connections
  - We'd have to install database drivers on thousands of sensors
* We'd need to write and test database retry logic
  - Or accpet possible loss of data
* Who will support this? Me?

## So wrap the database with an API!

* Still have to manage a database
  - with redundancy and failover
* but we also need to build and test the APIs
  - can they handle the traffic?
  - do we need a queue?
* Maintenance and monitoring
* Support


## So what should we do instead?

* What if there was a way to get many of the benefits of a database from just a bunch of files sat in cheap storage somewhere?
* This is where arrow comes in...
