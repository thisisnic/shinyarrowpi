## Project outline

* What is it?
* Why should you care?

::: {.notes}
Nic and I will describe an IoT project, built using a variety of tools, but all surfaced in a couple of Shiny apps.

Whilst you might not be that interested in the project as a whole, hopefully there's something in amongst all of this that you can take away for your own Shiny applications.
:::





## Project overview{.smaller}

![](images/mikey-harris-kw0z6RyvC0s-unsplash.jpg){fig-align="center"}

::: footer
Photo by [Mikey Harris](https://unsplash.com/@mikeyharris) on [Unsplash](https://unsplash.com/s/photos/home-office).
:::

::: {.notes}
Home office air quality study
:::





## What does this look like?

<br />

```{mermaid}
  flowchart TB;
      A(Sensor Bundle)--all data-->E("Data storage<br />(AWS S3 using feather or parquet)")
      E-->F(Create model)
      F-->G
      E-->G(Production Shiny app)
      A--recent data-->H(Local monitoring Shiny app)
```

::: {.notes}
* we have sensors reading data
* those sensors need to be able to be read locally
* data from the sensors needs to be aggregated upwards and combined with other data
  - local weather etc

The aggregated data can then be used to model ventilation recommendations, provide early wanrings and so on.
 # linkStyle 0 stroke-width:5px,fill:none,stroke:blue;
:::





## Sensor Bundle

<br />

```{mermaid}
  flowchart TB;
      A(Sensor Bundle) --all data--> E("Data storage<br />(AWS S3 using feather or parquet)")
      E --> F(Create model)
      F --> G
      E --> G(Production Shiny app)
      A --recent data--> H(Local monitoring Shiny app)
      style A fill:#f00,stroke:#333,stroke-width:4px,color:white
```

::: {.notes}
:::



## Sensor Bundle continued...{.smaller}

:::: {.columns}

::: {.column width="50%"}

![](images/enviro-plus.webp)


:::

::: {.column width="50%"}
<br />
<br />
<br />
**Enviro+ for Raspberry Pi**

* Temperature, pressure, humidity sensor
* Light and proximity sensor
* Analog gas sensor
* Sound level sensor

:::
::::

::: footer
Photo by [pimoroni.com](https://shop.pimoroni.com/products/enviro?variant=31155658457171)
:::

::: {.notes}
* What is it
* Where did it come from
* What does it do
:::





## Sensor output

Sample of the output

::: {.notes}
* What does it tell us?
:::





## Local Monitoring Shiny App

<br />

```{mermaid}
  flowchart TB;
      A(Sensor Bundle) --all data--> E("Data storage<br />(AWS S3 using feather or parquet)")
      E --> F(Create model)
      F --> G
      E --> G(Production Shiny app)
      A --recent data--> H(Local monitoring Shiny app)
      style H fill:#f00,stroke:#333,stroke-width:4px,color:white
```

::: {.notes}
* Each node has a shiny app that presents data to local users
* This is where the r4pi project comes in
:::







## Running R on a Raspberry Pi

![](images/r4pi.png){fig-align="center"}

::: footer
See [r4pi.org](https://r4pi.org) for more!
:::

::: {.notes}
Brief overview of the R4Pi project:

* What is it
* What's the point of it
* How does it benefit R users
:::





## Anatomy of an IoT project

* Potentially thousands of sensors
* All linked together or reporting back
* Examples:
  - Barcode scanning and stock control
  - If hospitals had network connected medicine fridges, the could use the fridges to report on inventory and start to predict when they will need more stock.

::: {.notes}
At this point it's worth taking a step back and thinking about what we're discussing here.
We only have a single sensor bundle, but the architecture we're talking about could easily support thousands.
:::






## Data storage

<br />

```{mermaid}
  flowchart TB;
      A(Sensor Bundle) --all data--> E("Data storage<br />(AWS S3 using feather or parquet)")
      E --> F(Create model)
      F --> G
      E --> G(Production Shiny app)
      A --recent data--> H(Local monitoring Shiny app)
      style E fill:#f00,stroke:#333,stroke-width:4px,color:white
```

::: {.notes}
* Why do we use s3?
* How does that benefit us?
:::




## Collect data from _all_ the sensors!

![](images/all_the_things.png){fig-align="center"}

::: {.notes}
This is essential for better predictions and greater insight into the local environment
:::







## Just use a database!

* We have to manage a database
  - with redundancy and failover
* Consistency
* maintaining thousands of connections
  - We'd have to install database drivers on thousands of sensors
* We'd need to write and test database retry logic
  - Or accpet possible loss of data
* Who will support this? Me?







## So wrap the database with an API!

* Still have to manage a database
  - with redundancy and failover
* but we also need to build and test the APIs
  - can they handle the traffic?
  - do we need a queue?
* Maintenance and monitoring
* Support


## So what should we do instead?

* What if there was a way to get many of the benefits of a database from just a bunch of files sat in cheap storage somewhere?
* This is where arrow comes in...
